{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { verify, strictVerify, Config } from './index'\n\ndescribe('env-verify', () => {\n  describe('verify', () => {\n    it('matches flat objects values to provided source keys', () => {\n      const env = {\n        DB_HOST: 'localhost:3000',\n        DB_NAME: 'postgres'\n      }\n      const flatConfig = {\n        dbHost: 'DB_HOST',\n        dbName: 'DB_NAME'\n      }\n      const expected = {\n        dbHost: 'localhost:3000',\n        dbName: 'postgres'\n      }\n      const results = verify(flatConfig, env)\n\n      expect(results.config).toEqual(expected)\n    })\n\n    it(\"matches nested object's values to provided env keys\", () => {\n      const env = {\n        c: 'C',\n        d: 'D',\n        e: 'E'\n      }\n      const nestedConfig = {\n        1: {\n          2: {\n            3: 'c'\n          },\n          4: 'd'\n        },\n        5: 'e'\n      }\n      const expected = {\n        1: {\n          2: {\n            3: 'C'\n          },\n          4: 'D'\n        },\n        5: 'E'\n      }\n      const results = verify(nestedConfig, env)\n\n      expect(results.config).toEqual(expected)\n    })\n    describe('with missing values', () => {\n      it('should return an error string', () => {\n        const env = {\n          PRESENT: 'present'\n        }\n        const config = {\n          1: 'PRESENT',\n          2: 'MISSING',\n          3: {\n            6: {\n              7: 'MISSING'\n            },\n            4: 'MISSING',\n            5: 'MISSING'\n          }\n        }\n        const result = verify(config, env).errors\n\n        expect(result.length).toEqual(4)\n      })\n    })\n  })\n\n  describe('with transform functions', () => {\n    const env = {\n      PRESENT: 'present'\n    }\n    it('allows a tuple with a string and transform function', () => {\n      const configObj: Config = {\n        present: ['PRESENT', (envVal: string): any => envVal]\n      }\n\n      expect(() => verify(configObj, env)).not.toThrow()\n    })\n\n    it('allows the same tuple in a nested object', () => {\n      const configObj: Config = {\n        nested: {\n          present: ['PRESENT', (envVal: string) => envVal]\n        }\n      }\n      const result = verify(configObj, env).config\n\n      expect(result.nested.present).toEqual(env.PRESENT)\n    })\n\n    it('runs the transform function and inserts the transformed value', () => {\n      const transformed = ['hi', { there: ['this'] }, 'is', 'transformed']\n      const expected = expect.objectContaining(transformed)\n\n      const configObj: Config = {\n        present: ['PRESENT', (_envVal: string) => transformed]\n      }\n\n      const { present: result } = verify(configObj, env).config\n\n      expect(result).toEqual(expected)\n    })\n\n    it('still returns an error if the env value is missing', () => {\n      const configObj: Config = {\n        missing: ['MISSING', (envValue: string) => envValue]\n      }\n\n      const { errors } = verify(configObj, env)\n\n      expect(errors.length).toEqual(1)\n    })\n\n    it('does not call the transform function if the env value is missing', () => {\n      const transformFn = jest.fn()\n\n      const configObj: any = {\n        missing: ['MISSING', transformFn]\n      }\n\n      verify(configObj, env)\n\n      expect(transformFn).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('strictVerfiy', () => {\n    it('should throw an error on missing .env value', () => {\n      const env = {\n        a: 'A'\n      }\n      const config = {\n        1: 'a',\n        2: 'zz-top',\n        3: {\n          6: {\n            7: 'IM_ALSO_MISSING'\n          },\n          4: 'IM_MISSING',\n          5: 'ME_TOO'\n        }\n      }\n      expect(() => strictVerify(config, env)).toThrowError()\n    })\n\n    it('should not throw an error when all .env values are present', () => {\n      const env = {\n        a: 'A',\n        'zz-top': 'ZZ_TOP'\n      }\n      const config = {\n        1: 'a',\n        2: 'zz-top'\n      }\n      const expected = {\n        1: 'A',\n        2: 'ZZ_TOP'\n      }\n\n      expect(strictVerify(config, env)).toEqual(expected)\n    })\n  })\n})\n"]}