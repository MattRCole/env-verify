{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { verify, strictVerify } from './index'\n\ndescribe('env-verify', () => {\n  describe('verify', () => {\n    it('matches flat objects values to provided source keys', () => {\n      const env = {\n        DB_HOST: 'localhost:3000',\n        DB_NAME: 'postgres'\n      }\n      const flatConfig = {\n        dbHost: 'DB_HOST',\n        dbName: 'DB_NAME'\n      }\n      const expected = {\n        dbHost: 'localhost:3000',\n        dbName: 'postgres'\n      }\n      const results = verify(flatConfig, env)\n\n      expect(results.config).toEqual(expected)\n    })\n\n    it(\"matches nested object's values to provided env keys\", () => {\n      const env = {\n        c: 'C',\n        d: 'D',\n        e: 'E'\n      }\n      const nestedConfig = {\n        1: {\n          2: {\n            3: 'c'\n          },\n          4: 'd'\n        },\n        5: 'e'\n      }\n      const expected = {\n        1: {\n          2: {\n            3: 'C'\n          },\n          4: 'D'\n        },\n        5: 'E'\n      }\n      const results = verify(nestedConfig, env)\n\n      expect(results.config).toEqual(expected)\n    })\n    describe('with missing values', () => {\n      it('should return an error string', () => {\n        const env = {\n          a: 'A'\n        }\n        const config = {\n          1: 'a',\n          2: 'zz-top',\n          3: {\n            6: {\n              7: 'IM_ALSO_MISSING'\n            },\n            4: 'IM_MISSING',\n            5: 'ME_TOO'\n          }\n        }\n        expect(verify(config, env).errors.length).toEqual(4)\n      })\n    })\n  })\n  describe('strictVerfiy', () => {\n    it('should throw an error on missing .env value', () => {\n      const env = {\n        a: 'A'\n      }\n      const config = {\n        1: 'a',\n        2: 'zz-top',\n        3: {\n          6: {\n            7: 'IM_ALSO_MISSING'\n          },\n          4: 'IM_MISSING',\n          5: 'ME_TOO'\n        }\n      }\n      expect(() => strictVerify(config, env)).toThrowError()\n    })\n\n    it('should not throw an error when all .env values are present', () => {\n      const env = {\n        a: 'A',\n        'zz-top': 'ZZ_TOP'\n      }\n      const config = {\n        1: 'a',\n        2: 'zz-top'\n      }\n      const expected = {\n        1: 'A',\n        2: 'ZZ_TOP'\n      }\n\n      expect(strictVerify(config, env)).toEqual(expected)\n    })\n  })\n})\n"]}