{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAkBA,MAAM,eAAe,GAAG,CAAC,EACvB,MAAM,EACN,GAAG,EACH,MAAM,GAAG,EAAa,EACtB,IAAI,GAAG,EAAE,EACa,EAAyB,EAAE;IACjD,MAAM,OAAO,GAAG,CAAC,GAAW,EAAqB,EAAE;QACjD,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;QACzB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,GAAG,EAAE,CAAA;QAE1D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,CAAA;YAC3B,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,MAAM,CAAC,IAAI,CACT,IAAI,KAAK,CACP,qBAAqB,KAAK,qCAAqC,OAAO,EAAE,CACzE,CACF,CAAA;aACF;YACD,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAuB,CAAA;SAChD;aAAM;YACL,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,eAAe,CAAC;gBAC/D,MAAM,EAAE,KAAK;gBACb,GAAG;gBACH,IAAI,EAAE,OAAO;aACd,CAAC,CAAA;YAEF,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;YACjC,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,CAAA;SAC5B;IACH,CAAC,CAAA;IACD,MAAM,UAAU,GAAG,CAAC,GAAsB,EAAE,GAAsB,EAAE,EAAE,CAAC,CAAC;QACtE,GAAG,GAAG;QACN,GAAG,GAAG;KACP,CAAC,CAAA;IACF,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IACnD,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,EAAE,EAAuB,CAAC,CAAA;IAExE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAA;AACjD,CAAC,CAAA;AAED,SAAgB,MAAM,CACpB,MAAyB,EACzB,MAA6C,OAAO,CAAC,GAAG;IAExD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,eAAe,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;IAExE,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAC9B,CAAC,EAAE,OAAO,EAAuB,EAAE,EAAE,CAAC,OAAO,CAC9C,CAAA;IAED,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,CAAA;AACvD,CAAC;AAXD,wBAWC;AAED,SAAgB,YAAY,CAC1B,MAAyB,EACzB,MAA6C,OAAO,CAAC,GAAG;IAExD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;IAE3D,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,iCAAiC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;KACtE;IACD,OAAO,WAA6B,CAAA;AACtC,CAAC;AAVD,oCAUC","sourcesContent":["export interface MappedConfig {\n  [key: string]: string | undefined | MappedConfig\n}\ninterface ConfigWithEnvKeys {\n  [key: string]: string | ConfigWithEnvKeys\n}\n\ninterface VerifyParamCollection {\n  config: ConfigWithEnvKeys\n  env: { [key: string]: string | undefined }\n  errors?: Error[]\n  path?: string\n}\n\nexport interface VerifiedConfig {\n  [key: string]: string | VerifiedConfig\n}\n\nconst recursiveVerify = ({\n  config,\n  env,\n  errors = [] as Error[],\n  path = ''\n}: VerifyParamCollection): VerifyParamCollection => {\n  const mapConf = (key: string): ConfigWithEnvKeys => {\n    const value = config[key]\n    const subPath = path.length === 0 ? key : `${path}.${key}`\n\n    if (typeof value === 'string') {\n      const envValue = env[value]\n      if (envValue === undefined) {\n        errors.push(\n          new Error(\n            `environment value ${value} is missing from config object at ${subPath}`\n          )\n        )\n      }\n      return { [key]: envValue } as ConfigWithEnvKeys\n    } else {\n      const { errors: subErrors, config: subConfig } = recursiveVerify({\n        config: value,\n        env,\n        path: subPath\n      })\n\n      errors = errors.concat(subErrors)\n      return { [key]: subConfig }\n    }\n  }\n  const reduceConf = (acc: ConfigWithEnvKeys, obj: ConfigWithEnvKeys) => ({\n    ...acc,\n    ...obj\n  })\n  const mappedConf = Object.keys(config).map(mapConf)\n  const newConfig = mappedConf.reduce(reduceConf, {} as ConfigWithEnvKeys)\n\n  return { config: newConfig, env, errors, path }\n}\n\nexport function verify(\n  config: ConfigWithEnvKeys,\n  env: { [key: string]: string | undefined } = process.env\n): { config: MappedConfig; errors: string[] } {\n  const { config: builtConfig, errors } = recursiveVerify({ config, env })\n\n  const errorMessages = errors.map(\n    ({ message }: { message: string }) => message\n  )\n\n  return { config: builtConfig, errors: errorMessages }\n}\n\nexport function strictVerify(\n  config: ConfigWithEnvKeys,\n  env: { [key: string]: string | undefined } = process.env\n): VerifiedConfig {\n  const { config: builtConfig, errors } = verify(config, env)\n\n  if (errors.length > 0) {\n    throw new Error(`Missing configuration values: ${errors.join('\\n')}`)\n  }\n  return builtConfig as VerifiedConfig\n}\n"]}